# Copyright (C) Microsoft Corporation. All rights reserved.
# This file is distributed under the University of Illinois Open Source License. See LICENSE.TXT for details.

import argparse
import os
import hctdb_instrhelp as hct

def _generate_floatlike_intrinsics(impl_file, test_file):
    for f in (impl_file, test_file):
        f.write(
'''# Copyright 2023 Pavlo Penenko
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.\n\n'''
    )
        f.write('''# ATTENTION! This file has been auto-generated by
# https://github.com/ppenenko/DirectXShaderCompiler/blob/metashade/issues/9/export_intrinsics/utils/metashade/export_intrinsics.py\n\n'''
    )

    impl_file.write('class FloatlikeMixin:\n')
    test_file.write('def test(sh):\n')

    db = hct.get_db_hlsl()

    for intr in sorted(db.intrinsics, key = lambda intr: intr.name):
        if (   intr.ns != "Intrinsics"
            or intr.vulkanSpecific
            or intr.hidden
            or len(intr.params) != 2
        ):
            continue

        # This param represents the return value, check the assumption that
        # it's always the first one
        assert(intr.params[0].name == intr.name)

        skip_intr = False
        for param in intr.params:
            if param.component_list not in (
                'LICOMPTYPE_FLOAT_LIKE',
                'LICOMPTYPE_ANY_FLOAT',
                'LICOMPTYPE_FLOAT_DOUBLE'
            ):
                skip_intr = True
                continue
            if param.name == intr.name:
                if (param.template_list not in
                    ('LITEMPLATE_ANY' 'LITEMPLATE_SCALAR')
                ):
                    skip_intr = True
                    continue
            else:
                # This is the only parameter
                if (param.template_list != 'LITEMPLATE_ANY'):
                    skip_intr = True
                    continue

        if skip_intr:
            continue

        impl_file.write(f'\tdef {intr.name}(self):\n')
        impl_file.write(
            f'\t\treturn self.__class__( f\'{intr.name}({{self}})\' )\n\n'
        )

        def _generate_test_func(dtype_suffix : str):
            func_name = f'test_{intr.name}_Float{dtype_suffix}'
            test_file.write(
                f'\twith sh.function("{func_name}",'
                f' sh.Float{dtype_suffix})():\n'
            )
            test_file.write(
                f'\t\tsh.f{dtype_suffix}_{intr.name} = '
                f'sh.g_f{dtype_suffix}.{intr.name}()\n'
            )
            test_file.write(
                f'\t\tsh.return_( sh.f{dtype_suffix}_{intr.name} )\n\n'
            )

        _generate_test_func('')

        for dim in range(1, 5):
            _generate_test_func(str(dim))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description =   "Generate Metashade code for HLSL intrinsics"
                        "from their definitions in DXC"
    )
    parser.add_argument(
        "--metashade-root",
        help = "Path to the root directory of the Metashade repo"
    )
    args = parser.parse_args()
    
    if not os.path.isdir(args.metashade_root):
        raise NotADirectoryError(args.metashade_root)

    impl_file_path = os.path.join(
        args.metashade_root, 'metashade', 'hlsl', 'sm6', '_float_intrinsics.py'
    )
    test_file_path = os.path.join(
        args.metashade_root, 'tests', '_auto_float_intrinsics.py'
    )

    with ( open(impl_file_path, 'w') as impl_file,
        open(test_file_path, 'w') as test_file
    ):
        _generate_floatlike_intrinsics(impl_file, test_file)
